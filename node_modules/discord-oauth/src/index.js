"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const querystring_1 = __importDefault(require("querystring"));
class oAuth {
    /**
     * Initialize the wrapper.
     * @constructor
     * @param {string} client_id - Your application's client-id.
     * @param {string} client_secret - Your application's client-secret.
     * @param {string} callback_uri - Your application's redirect url.
     */
    constructor(config) {
        if (!config || !config.client_id || !config.callback_uri || !config.callback_uri)
            throw new Error('Invalid Config.');
        this.config = config;
        this.cache = new Map();
    }
    /**
     * Cache the user.
     * @constructor
     * @param {string} code - The redirect code.
     */
    init(code) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!code)
                throw new Error('Provide a valid code.');
            const res = yield axios_1.default.post('https://discord.com/api/v7/oauth2/token', querystring_1.default.stringify({
                client_id: this.config.client_id,
                client_secret: this.config.client_secret,
                grant_type: 'authorization_code',
                code,
                redirect_uri: this.config.callback_uri
            }), {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }).catch(() => { return; });
            if (res) {
                this.cache.set(res.data.access_token, res.data);
                return this.cache.get(res.data.access_token);
            }
            else {
                return 'Invalid code.';
            }
        });
    }
    /**
     * Get a user with their access-token.
     * @constructor
     * @param {string} code - The code object we got from initializing before.
     */
    getUser(code) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield axios_1.default.get('https://discordapp.com/api/v7/users/@me', {
                headers: {
                    'Authorization': `Bearer ${code.access_token}`
                }
            })).data;
        });
    }
    /**
     * Get a user's guilds.
     * @constructor
     * @param {string} code - The code object we got from initializing before.
     */
    getGuilds(code) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield axios_1.default.get('https://discordapp.com/api/v7/users/@me/guilds', {
                headers: {
                    'Authorization': `Bearer ${code.access_token}`
                }
            })).data;
        });
    }
    /**
    * Get a guild, requires a bot token.
    * @constructor
    * @param {string} guildId - The guild-id you want to get.
    * @param {string} token - Your bot token.
    */
    getGuild(guildId, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield axios_1.default.get(`https://discordapp.com/api/v7/guilds/${guildId}?with_counts=true`, {
                headers: {
                    'Authorization': `Bot ${token}`
                }
            })).data;
        });
    }
}
exports.default = oAuth;
